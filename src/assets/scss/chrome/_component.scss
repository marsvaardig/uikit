@use "../tools" as *;

.component {
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
  gap: var(--ui-spacing-fluid);
  min-inline-size: 100%;
  max-inline-size: 100%;
  padding: var(--ui-spacing-fluid);
  overflow: hidden;
  color: var(--ui-text-primary);
  background: var(--ui-background-primary);
  border-radius: var(--ui-chrome-radius-m);
  transition: transform $chrome-transition-duration $chrome-transition-easing;
  will-change: transform, min-inline-size, inline-size;

  @include breakpoint($chrome-breakpoint2) {
    min-inline-size: 0;
  }

  @include has(".sidebar--left") {
    min-inline-size: calc((100vw - (env(safe-area-inset-right) + env(safe-area-inset-left))) - #{px(48)} - #{px(8)});
    transform: translateX(max(calc(max(#{px(-400)} + #{px(48)}, (-100% + #{px(8)})) * (1 - var(--ui-sidebar-left-progress)))));

    @include breakpoint($chrome-breakpoint2) {
      min-inline-size: 0;
      transform: none;
    }
  }

  @include state("has", "toggled-sidebar-left") {
    & > *:not(.sidebar-overlay-toggle) {
      pointer-events: none;

      @include breakpoint($chrome-breakpoint2) {
        pointer-events: auto;
      }
    }
  }

  & > .sidebar-overlay-toggle {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    z-index: 3;
    display: none;
    inline-size: px(40);
    cursor: pointer;
    background: var(--ui-surface-primary);
    border-radius: var(--ui-radius-s);
    opacity: calc(0.75 - var(--ui-sidebar-left-progress) * 0.75);
    will-change: background, opacity;

    @include transition(background $chrome-transition-duration $chrome-transition-easing, opacity $chrome-transition-duration $chrome-transition-easing);

    @include state('has', 'toggled-sidebar-left') {
      display: block;

      @include breakpoint($chrome-breakpoint2) {
        display: none;
      }
    }

    @include breakpoint($chrome-breakpoint2) {
      display: none;
    }
  }
}
